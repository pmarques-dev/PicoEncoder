;
; Copyright (c) 2023 Raspberry Pi (Trading) Ltd.
;
; SPDX-License-Identifier: BSD-3-Clause
;
; pico_encoder: reads a quadrature encoder with no CPU
; intervention and provides the current position on request.
;
; the "substep" version uses not only the step counts, but also the timing of 
; the steps to compute the current speed. This is especially useful at low
; counts per sample, where the jitter of the counts is very noisy.
; For instance, an encoder doing 230 steps per second sampled at 100Hz would
; give something like 2, 3, 2, 2, 3, ... counts. The substep version will keep
; returning a speed around 230*64 substeps per second at every sample (each
; encoder step has 64 "substeps").


.program pico_encoder

.origin 0

; the PIO code counts steps like a standard quadrature encoder, but also
; keeps track of the time passed since the last transition. This allows the C
; code to build a good estimate of a fractional step position based on the
; lastest speed and time passed
;
; since it needs to push two values, it only pushes new data when the FIFO has
; enough space to hold both values. Otherwise it could either stall or go out
; of sync
;
; since we need to count the time passed, all loops must take the same number of
; cycles and there are delays added to the fastest branches to make sure it
; always takes 13 cycles per loop (e.g., sysclk 133MHz, max step rate = ~10.2
; Msteps/sec)

	; push the step count and transition clock count to the RX FIFO (using
	; auto push). This is reached by the "MOV PC, ~STATUS" instruction when
	; status is all 1 (meaning fifo has space for this push). It also may
	; execute once at program start, but that has basically no effect
	IN X, 32
	IN Y, 32

update_state:
	; build the state by using 2 bits from the negated previous state of the
	; pins and the new 2 bit state of the pins
	OUT ISR, 2
	IN PINS, 2
	MOV OSR, ~ISR
	; use the jump table to update the step count accordingly
	MOV PC, OSR

decrement:
	; decrement the step count
	JMP Y--, decrement_cont
decrement_cont:
	; when decrementing, X is set to 2^31, when incrementing it is set to
	; zero. That way the C code can infer in which direction the last
	; transition was taken and how long ago
	SET X, 1
	MOV X, ::X
	; after incrementing or decrementing, continue to "check_fifo"
check_fifo:
.wrap_target
	; on each iteration we decrement X to count the number of loops since
	; the last transition
	JMP X--, check_fifo_cont
check_fifo_cont:
	; push data or continue, depending on the state of the fifo
	MOV PC, ~STATUS

increment:
	; the PIO does not have a increment instruction, so to do that we do a
	; negate, decrement, negate sequence
	MOV Y, ~Y
	JMP Y--, increment_cont
increment_cont:
	MOV Y, ~Y
	; reset X to zero when incrementing
	SET X, 0
	; wrap above to check the fifo state
	.wrap

invalid:
	; this is just a placeholder to document what the code does on invalid
	; transitions, where the two phases change at the same time. We don't do
	; anything special, but the encoder should not generate these invalid
	; transitions anyway
	JMP update_state

	; this jump table starts at address 16 and is accessed by the
	; "MOV PC, OSR" instruction above, that loads the PC with the state on
	; the lower 4 bits and the 5th bit on. The delays here extend the faster
	; branches to take the same time as the slower branches
	JMP invalid
	JMP increment		[0]
	JMP decrement		[1]
	JMP check_fifo		[4]

	JMP decrement		[1]
	JMP invalid
	JMP check_fifo		[4]
	JMP increment		[0]

	JMP increment		[0]
	JMP check_fifo		[4]
	JMP invalid
	JMP decrement		[1]

	JMP check_fifo		[4]
	JMP decrement		[1]
	JMP increment		[0]
	; this instruction should be usually reached by the "MOV PC, ~STATUS"
	; instruction above when the status is zero, which means that the fifo
	; has data and we don't want to push more data. This can also be reached
	; on an invalid state transition, which should not happen. Even if it 
	; happens, it should be a transient state and the only side effect is
	; that we'll call update_state twice in a row
	JMP update_state	[1]





% c-sdk {

%}
